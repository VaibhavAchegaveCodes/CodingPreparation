Step 21
The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this.

You can use the id selector to target a specific element with an id attribute. An id selector is defined by placing the hash symbol # directly in front of the element's id value. For example, if an element has the id of cat then you would target that element like this:

Example Code
#cat {
  width: 250px;
}
Use the #menu selector to give your element a width of 300px.

body {
  background-color: burlywood;
}

h1, h2, p {
  text-align: center;
}
#menu{
  width:300px;
}


Step 22
Comments in CSS look like this:

Example Code
/* comment here */
In your style sheet, comment out the line containing the background-color property and value, so you can see the effect of only styling the #menu element. This will make the background white again.

/* background-color: burlywood; */


Step 23
Now use the existing #menu selector to set the background color of the div element to be burlywood.

#menu {
  width: 300px;
  background-color:burlywood;
}


Step 24
Now it's easy to see that the text is centered inside the #menu element. Currently, the width of the #menu element is specified in pixels (px).

Change the width property's value to be 80%, to make it 80% the width of its parent element (body).

#menu {
  width: 80%;
  background-color: burlywood;
}


Step 25
Next, you want to center the #menu horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the #menu element within the body element.

#menu {
  width: 80%;
  background-color: burlywood;
  margin-left:auto;
  margin-right:auto;
}


Step 26
So far you have been using type and id selectors to style elements. However, it is more common to use a different selector to style your elements.

A class selector is defined by a name with a dot directly in front of it, like this:

Example Code
.class-name {
  styles
}
Change the existing #menu selector into a class selector by replacing #menu with a class named .menu

.menu {
  width: 80%;
  background-color: burlywood;
  margin-left: auto;
  margin-right: auto;
}


Step 27
To apply the class's styling to the div element, remove the id attribute and add a class attribute to the div element's opening tag. Make sure to set the class value to menu.

<div class="menu">


Step 28
Since the cafe's main product for sale is coffee, you could use an image of coffee beans for the background of the page.

Delete the comment and its contents inside the body type selector. Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg).

body {
  background-image:url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)
}


Step 29
Itâ€™s looking good. Time to start adding some menu items. Add an empty article element under the Coffee heading. It will contain a flavor and price of each coffee you currently offer.

<h2>Coffee</h2>
          <article>
          </article>

Step 30
article elements commonly contain multiple elements that have related information. In this case, it will contain a coffee flavor and a price for that flavor. Nest two p elements inside your article element. The first one's text should be French Vanilla, and the second's text 3.00.

	  <article>
            <p>French Vanilla</p>
            <p>3.00</p>
          </article>