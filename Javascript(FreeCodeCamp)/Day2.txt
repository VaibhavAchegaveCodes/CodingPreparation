Step 11
You can also assign the value of a variable to another variable. For example:

Example Code
let first = "One";
let second = "Two";
second = first;
The second variable would now have the value "One".

To see this in action, change your secondCharacter assignment from "Test" to your character variable.

Then open the console to see what gets logged.

secondCharacter = character;


Step 12
You are now ready to declare your next variable. Remove both console.log statements, and the character reassignment.

Also remove your secondCharacter variable, but leave the character initialization unchanged.

let character = 'Hello';


Step 13
Before moving forward, you should take a moment to review the concepts you have learned.

Use the let keyword to declare a profession variable and an age variable. Initialize profession with the string "teacher", but do not initialize age with any value.

Log both of your variables to the console to see the results.

let profession="teacher";
let age;
console.log(profession);
console.log(age);


Step 14
Now that you have reviewed declaration and initialization, remove the code you wrote for your review.

Do not remove your character variable.

Step 15
Use let to declare a count variable. Assign it the number 8. When using a number value, you do not use quotes. For example:

Example Code
let money = 100;

let character = 'Hello';
let count=8;


Step 16
With the number data type, you can perform mathematical operations, like addition. Try printing count + 1 to the console.

let character = 'Hello';
let count = 8;
console.log(count+1)


Step 17
You can also perform subtraction (-), multiplication (*), and division (/). Feel free to experiment with the operators and numbers in your console.log. When you are ready to move on, remove the console.log.

let count = 8;
console.log(count / 1); //quotient
console.log(count - 1); //subtraction
console.log(count * 1); //multiplication
console.log(count % 1); //remainder


Step 18
In programming, you will often need to work with lots of data. There are many data structures that can help you organize and manage your data. One of the most basic data structures is an array.

An array is a non-primitive data type that can hold a series of values. Non-primitive data types differ from primitive data types in that they can hold more complex data. Primitive data types like strings and numbers can only hold one value at a time.

Arrays are denoted using square brackets ([]). Here is an example of a variable with the value of an empty array:

Example Code
let array = [];
Declare a rows variable and assign it an empty array.

let character = 'Hello';
let count = 8;
let rows=[];


Step 19
When an array holds values, or elements, those values are separated by commas. Here is an array that holds two strings:

Example Code
let array = ["first", "second"];
Change your rows declaration to be an array with the strings "Naomi", "Quincy", and "CamperChan". The order of values in an array is important, so follow that order. Remember that strings are case-sensitive.

let character = 'Hello';
let count = 8;
let rows = ['Naomi','Quincy','CamperChan'];


Step 20
You can access the values inside an array using the index of the value. An index is a number representing the position of the value in the array, starting from 0 for the first value.

You can access the value using bracket notation, such as array[0].

Use console.log and bracket notation to print the first value in your rows array.

let character = 'Hello';
let count = 8;
let rows = ["Naomi", "Quincy", "CamperChan"];
console.log(rows[0]);