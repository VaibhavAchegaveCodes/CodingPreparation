Step 61
Now your call variable has the value "Testing". But your function is no longer using the name parameter.

Remove the name parameter from your function declaration, then remove your "CamperChan" string from the padRow call.

Also, remove both console.log from the padRow function.

function padRow() {
  const test = "Testing";
  return test;
}
const call = padRow();
console.log(call);


Step 62
Because your function was no longer using the parameter, changing the argument did not affect it.

Go ahead and remove the test declaration and return statement from your padRow function, so the function is empty again.


function padRow() {

}
const call = padRow();
console.log(call);


Step 63
As expected, your function now returns undefined again. Your call variable is not necessary any more, so remove the call declaration and the console.log for the call variable.

function padRow() {

}
padRow();


Step 64
In order to know how to format a row, your padRow function will need to know which row number you are on, and how many rows in total are being generated.

The best way to do this is by creating function parameters for them. Give your padRow function a rowNumber and rowCount parameter. Multiple parameters are separated by a comma:

Example Code
function name(first, second) {

}

function padRow(rowNumber,rowCount) {

}


Step 65
Remember in an earlier step, you learned about return values. A function can return a value for your application to consume separately.

In a function, the return keyword is used to specify a return value. For example, this function would return the value given to the first parameter:

Example Code
function name(parameter) {
  return parameter;
}
Use the return keyword to return the value of the character variable, repeated rowNumber times.

function padRow(rowNumber, rowCount) {
   return character.repeat(rowNumber);
}


Step 66
A function call allows you to actually use a function. You may not have been aware of it, but the methods like .push() that you have been using have been function calls.

A function is called by referencing the function's name, and adding (). Here's how to call a test function:

Example Code
test();
Replace the character.repeat(i + 1) in your .push() call with a function call for your padRow function.

for (let i = 0; i < count; i = i + 1) {
  rows.push(padRow())
}


Step 67
Your padRow function has two parameters which you defined. Values are provided to those parameters when a function is called.

The values you provide to a function call are referred to as arguments, and you pass arguments to a function call. Here's a function call with "Hello" passed as an argument:

Example Code
test("Hello");
Pass i + 1 and count as the arguments to your padRow call. Like parameters, arguments are separated by a comma.

for (let i = 0; i < count; i = i + 1) {
  rows.push(padRow(i+1,count))
}

Step 68
You should now see the same bunch of characters in your console. Your padRow function is doing the exact same thing you were doing earlier, but now it's in a reusable section of its own.

Use the addition operator to concatenate a single space " " to the beginning and end of your repeated character string.

Remember that you can use the + operator to concatenate strings like this:

Example Code
" " + "string"

function padRow(rowNumber, rowCount) {
  return " "+character.repeat(rowNumber)+ " ";
}


Step 69
Now it is time for a bit of math. Consider a three-row pyramid. If we want it centered, it would look something like:

Example Code
··#··
·###·
#####
Empty spaces have been replaced with interpuncts, or middle dots, for readability. If you extrapolate the pattern, you can see that the spaces at the beginning and end of a row follow a pattern.

Update your blank space strings to be repeated rowCount - rowNumber times.

Open up the console to see the result.


function padRow(rowNumber, rowCount) {
  return " ".repeat(rowCount - rowNumber) + character.repeat(rowNumber) + " ".repeat(rowCount - rowNumber);
}


Step 70
You can pass full expressions as an argument. The function will receive the result of evaluating that expression. For example, these two function calls below would yield the same result. (Note that the order of operations rule PEMDAS—Parenthesis, Exponents, Multiplication, Division, Addition, Subtraction—applies):

Example Code
test(2 * 3 + 1);
test(7);
Looking at the pattern again:

Example Code
··#··
·###·
#####
Update the character value to be repeated 2 * rowNumber - 1 times.

Open up the console again to see the updated result.


function padRow(rowNumber, rowCount) {
  return " ".repeat(rowCount-rowNumber) + character.repeat(2* rowNumber -1) + " ".repeat(rowCount-rowNumber);
}